{"version":3,"sources":["Components/Dial.js","Components/Display.js","Components/Controls.js","Components/Main.js","serviceWorker.js","index.js"],"names":["Dial","draw","canvas","_this","refs","ctx","getContext","clearRect","font","radius","getBoundingClientRect","width","fillStyle","shadowBlur","shadowColor","beginPath","ellipse","Math","PI","fill","lineWidth","strokeStyle","borderWidth","props","fraction","stroke","arc","this","react_default","a","createElement","ref","height","React","Component","Display","_ref","seconds","active","className","concat","Controls","dec","inc","toggle","rest","onClick","Main","state","name","sets","editing","timerStop","console","log","clearInterval","timer","setState","toggleRest","incrementRest","e","nu","decrementRest","runClock","i","setInterval","toPrecision","ceil","window","navigator","vibrate","countDown","setDone","reset","setLocalStorage","_this$state","json","localStorage","setItem","JSON","stringify","ls","getItem","_JSON$parse","parse","id","Components_Dial","Components_Display","Fragment","Components_Controls","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","ReactDOM","render","Main_Main","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.00929b17.chunk.js","sourcesContent":["import React from \"react\";\n\n/************************************************************************************\n * Canvas element and animation logic\n ************************************************************************************/\nclass Dial extends React.Component {\n  draw = () => {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, 240, 240);\n    ctx.font = \"9em Archivo Black\";\n    const lineWidth = 25;\n    const borderWidth = 5;\n    const margin = 5;\n    let width = canvas.getBoundingClientRect().width - margin;\n    let radius = width / 2;\n\n    //Shadow\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.25)\";\n    ctx.shadowBlur = 15;\n    ctx.shadowColor = \"rgba(0 0, 0, 0.25)\";\n    ctx.beginPath();\n    ctx.ellipse(\n      radius,\n      radius + 7,\n      radius - borderWidth,\n      radius - borderWidth,\n      1.5 * Math.PI,\n      0,\n      2 * Math.PI\n    );\n    ctx.fill();\n\n    //Bottom dial\n    ctx.fillStyle = \"black\";\n    ctx.beginPath();\n    ctx.ellipse(\n      radius,\n      radius,\n      radius - borderWidth,\n      radius - borderWidth,\n      1.5 * Math.PI,\n      0,\n      2 * Math.PI\n    );\n    ctx.fill();\n\n    //Progess Ring\n    ctx.lineWidth = lineWidth;\n    ctx.beginPath();\n    ctx.strokeStyle = \"cornflowerblue\";\n    ctx.ellipse(\n      radius,\n      radius,\n      radius - borderWidth * 4,\n      radius - borderWidth * 4,\n      1.5 * Math.PI,\n      0,\n      2 * this.props.fraction * Math.PI\n    );\n    ctx.stroke();\n\n    //Base RIng\n    ctx.lineWidth = 10;\n    ctx.strokeStyle = \"white\";\n    ctx.beginPath();\n    ctx.arc(radius, radius, radius - borderWidth, 0, 2 * Math.PI);\n    ctx.stroke();\n  };\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  render() {\n    return <canvas ref=\"canvas\" width=\"240\" height=\"240\" />;\n  }\n}\n\nexport default Dial;\n","import React from \"react\";\n\n/************************************************************************************\n * Presentation Component for Timer countdown display. Text was blurry on canvas\n * so I moved the text to absolutely positioned div with nested heading elements\n ************************************************************************************/\nconst Display = ({ seconds, active }) => (\n  <div className=\"dial\">\n    <div className=\"dial--box\">\n      <div className=\"dial--display\">\n        <h1 className=\"dial--display-text\">\n          {seconds < 10 ? `0${seconds}` : seconds}\n        </h1>\n        <h4>TOUCH TO {active ? \"STOP\" : \"START\"}</h4>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Display;\n","import React from \"react\";\n\n/************************************************************************************\n * Presentation Component for Timer controls\n ************************************************************************************/\nconst Controls = ({ dec, inc, toggle, rest }) => (\n  <div className=\"timer--display\">\n    <i className=\"fas fa-minus button-fa\" onClick={dec} />\n    <div className=\"timer--display-num\" onClick={toggle}>\n      <h1>{rest}</h1>\n      <h6>TOUCH TO CLOSE</h6>\n    </div>\n    <i className=\"fas fa-plus button-fa\" onClick={inc} />\n  </div>\n);\n\nexport default Controls;\n","import React from \"react\";\r\nimport Dial from \"./Dial\";\r\nimport Display from \"./Display\";\r\nimport Controls from \"./Controls\";\r\n\r\n/************************************************************************************\r\n * Main App and Logic Class\r\n ************************************************************************************/\r\nexport default class Main extends React.Component {\r\n  state = {\r\n    name: \"APP\",\r\n    sets: 0,\r\n    seconds: 60,\r\n    rest: 60,\r\n    fraction: 0,\r\n    editing: false,\r\n    active: false\r\n  };\r\n\r\n  //Stop timer and clear interval to prevent concurrent timers running\r\n  timerStop = () => {\r\n    console.log(\"Timer stopped\");\r\n    clearInterval(this.timer);\r\n    this.setState({ active: false });\r\n  };\r\n\r\n  // Open/Close Rest Period input box\r\n  toggleRest = () => {\r\n    if (!this.state.active) this.setState({ editing: !this.state.editing });\r\n  };\r\n\r\n  //Increase rest period from 5 - 300 \"seconds\" in steps of 5\r\n  incrementRest = e => {\r\n    let nu = this.state.rest <= 295 ? this.state.rest + 5 : 300;\r\n    this.setState({ rest: nu, seconds: nu });\r\n  };\r\n\r\n  //Decrease rest period from 5 - 300 \"seconds\" in steps of 5\r\n  decrementRest = e => {\r\n    let nu = this.state.rest >= 10 ? this.state.rest - 5 : 5;\r\n    this.setState({ rest: nu, seconds: nu });\r\n  };\r\n\r\n  //Activate timer\r\n  runClock = () => {\r\n    let rest = this.state.rest; //Rest period\r\n    let seconds = this.state.seconds; //Countdown seconds for the display\r\n    let i = 0; //counter to decrement seconds on every 100th interval\r\n    this.setState({ editing: false });\r\n    this.timer = setInterval(() => {\r\n      //If starting, immediately set to next second to avoid extra second in countdown\r\n      seconds = seconds === rest ? seconds - 1 : seconds;\r\n      this.setState({ seconds });\r\n\r\n      //Set seconds & rest to a multiple of 100 to offset the 10ms interval\r\n      seconds = seconds * 100;\r\n      seconds = seconds - i;\r\n      rest = rest * 100;\r\n      let fraction = (1.0 - seconds / rest).toPrecision(6);\r\n\r\n      //Rest them to original-ish state\r\n      seconds = Math.ceil(seconds / 100);\r\n      rest = rest / 100;\r\n\r\n      //if seconds get below 1, terminate; else keep counting down\r\n      if (this.state.seconds <= 0) {\r\n        this.timerStop();\r\n        this.setState({ seconds: this.state.rest, fraction: 0 });\r\n        window.navigator.vibrate([200, 200, 200]);\r\n      } else {\r\n        //Once i gets to 99, decrement seconds and reset i to zero\r\n        if (i === 99) {\r\n          this.setState({\r\n            seconds: seconds--\r\n          });\r\n          i = 0;\r\n        }\r\n\r\n        //Update fraction on every interval\r\n        this.setState({\r\n          fraction: fraction\r\n        });\r\n      }\r\n      i++;\r\n    }, 10);\r\n  };\r\n\r\n  // Start Timer, run countdown sequence if not already running\r\n  countDown = () => {\r\n    this.setState({ active: !this.state.active });\r\n    if (!this.state.active) {\r\n      this.runClock();\r\n    } else {\r\n      this.timerStop();\r\n    }\r\n  };\r\n\r\n  //Increment sets if starting timer from beginning\r\n  setDone = () => {\r\n    if (this.state.seconds === this.state.rest) {\r\n      this.setState({\r\n        sets: this.state.sets + 1\r\n      });\r\n    }\r\n    this.countDown();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      sets: 0,\r\n      fraction: 0,\r\n      seconds: this.state.rest\r\n    });\r\n    this.timerStop();\r\n  };\r\n\r\n  setLocalStorage = () => {\r\n    const { rest, sets } = this.state;\r\n    const json = { rest, sets };\r\n    localStorage.setItem(\"set_timer\", JSON.stringify(json));\r\n  };\r\n\r\n  componentDidMount() {\r\n    let ls = localStorage.getItem(\"set_timer\");\r\n    if (ls == null) {\r\n      this.setLocalStorage();\r\n    } else {\r\n      const { rest, sets } = JSON.parse(ls);\r\n      this.setState({ rest, sets, seconds: rest });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.setLocalStorage();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"header\">\r\n          <h1 className=\"title\">Set Counter/Rest Timer</h1>\r\n        </div>\r\n        <h2 className=\"data\">{`Sets: ${this.state.sets}`}</h2>\r\n        <div id=\"viz\">\r\n          <span onClick={this.setDone}>\r\n            <Dial fraction={this.state.fraction} seconds={this.state.seconds} />\r\n            <Display seconds={this.state.seconds} active={this.state.active} />\r\n          </span>\r\n        </div>\r\n        <React.Fragment>\r\n          {this.state.editing ? (\r\n            <Controls\r\n              rest={this.state.rest}\r\n              dec={this.decrementRest}\r\n              inc={this.incrementRest}\r\n              toggle={this.toggleRest}\r\n            />\r\n          ) : (\r\n            <div className=\"timer--display center\">\r\n              <h1\r\n                className=\"title\"\r\n                onClick={this.toggleRest}\r\n              >{`Rest: ${this.state.rest}`}</h1>\r\n            </div>\r\n          )}\r\n        </React.Fragment>\r\n        <span className=\"button reset\" onClick={this.reset}>\r\n          RESET\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst staticAssets = [\n  \"./\",\n  \"./manifest.json\",\n  \"/src/styles.sass\",\n  \"/js/index.js\",\n  \"/public/**/*.png\"\n];\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./Components/Main\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"./styles.sass\";\n\nfunction App() {\n  return <Main />;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nserviceWorker.register();\n"],"sourceRoot":""}