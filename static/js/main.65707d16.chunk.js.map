{"version":3,"sources":["Components/Timer.js","Components/Main.js","serviceWorker.js","index.js"],"names":["Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","draw","bind","assertThisInitialized","canvas","refs","ctx","getContext","clearRect","font","radius","getBoundingClientRect","width","fillStyle","shadowBlur","shadowColor","beginPath","ellipse","margin","Math","PI","fill","lineWidth","strokeStyle","arc","stroke","borderWidth","fraction","textAlign","textBaseline","fillText","seconds","react_default","a","createElement","ref","height","React","Component","Main","state","name","sets","rest","editing","active","timerStop","console","log","clearInterval","timer","setState","toggleRest","updateRest","e","value","parseInt","target","runClock","i","setInterval","toPrecision","ceil","fps","countDown","setDone","reset","className","id","concat","onClick","Timer_Timer","Fragment","type","onChange","min","step","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","ReactDOM","render","Main_Main","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.65707d16.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  draw() {\r\n    const canvas = this.refs.canvas;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, 300, 300);\r\n    ctx.font = \"9em Archivo Black\";\r\n    const lineWidth = 25;\r\n    const borderWidth = 5;\r\n    const margin = 5;\r\n    let width = canvas.getBoundingClientRect().width - margin;\r\n    let radius = width / 2;\r\n\r\n    //Shadow\r\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.25)\";\r\n    ctx.shadowBlur = 15;\r\n    ctx.shadowColor = \"rgba(0 0, 0, 0.25)\";\r\n    ctx.beginPath();\r\n    ctx.ellipse(\r\n      radius + margin / 2,\r\n      radius + 7,\r\n      radius - borderWidth,\r\n      radius - borderWidth,\r\n      1.5 * Math.PI,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.fill();\r\n\r\n    //Bottom dial\r\n    ctx.fillStyle = \"black\";\r\n    ctx.beginPath();\r\n    ctx.ellipse(\r\n      radius + margin / 2,\r\n      radius,\r\n      radius - borderWidth,\r\n      radius - borderWidth,\r\n      1.5 * Math.PI,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.fill();\r\n\r\n    //Base RIng\r\n    ctx.lineWidth = borderWidth;\r\n    ctx.strokeStyle = \"white\";\r\n    ctx.beginPath();\r\n    ctx.arc(radius + margin / 2, radius, radius - borderWidth, 0, 2 * Math.PI);\r\n    ctx.stroke();\r\n\r\n    //Progess Ring\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = \"cornflowerblue\";\r\n    ctx.ellipse(\r\n      radius + margin / 2,\r\n      radius,\r\n      radius - borderWidth * 4,\r\n      radius - borderWidth * 4,\r\n      1.5 * Math.PI,\r\n      0,\r\n      2 * this.props.fraction * Math.PI\r\n    );\r\n\r\n    //Timer Display\r\n    ctx.fillStyle = \"#fff\";\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.stroke();\r\n    ctx.fillText(this.props.seconds, radius, radius);\r\n\r\n    //Instructions\r\n    ctx.font = \"1em Archivo Black\";\r\n    ctx.fillText(\"TOUCH TO START\", radius, radius + 60);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.draw();\r\n  }\r\n\r\n  render() {\r\n    return <canvas ref=\"canvas\" width=\"300\" height=\"300\" />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Timer from \"./Timer\";\r\n\r\nexport default class Main extends React.Component {\r\n  state = {\r\n    name: \"APP\",\r\n    sets: 0,\r\n    seconds: 60,\r\n    rest: 60,\r\n    fraction: 0,\r\n    editing: false,\r\n    active: false\r\n  };\r\n\r\n  timerStop = () => {\r\n    console.log(\"Timer stopped\");\r\n    clearInterval(this.timer);\r\n    this.setState({ active: !this.state.active });\r\n  };\r\n\r\n  // Open/Close Rest Period input box\r\n  toggleRest = () => {\r\n    this.setState({ editing: !this.state.editing });\r\n  };\r\n\r\n  // Set Rest Period Update\r\n  updateRest = e => {\r\n    let value = parseInt(e.target.value);\r\n    value = value > 300 ? 300 : value < 0 ? 0 : value;\r\n    this.setState({ rest: value, seconds: value });\r\n  };\r\n\r\n  runClock = () => {\r\n    let rest = this.state.rest; //Rest period\r\n    let seconds = this.state.seconds; //Countdown seconds for the display\r\n    let i = 0; //counter to decrement seconds on every 100th interval\r\n    const fps = 50; //Frames per Second\r\n    const interval = 1000 / fps;\r\n    this.timer = setInterval(() => {\r\n      //If starting, immediately set to next second to avoid extra second in countdown\r\n      seconds = seconds === rest ? seconds - 1 : seconds;\r\n      this.setState({ seconds });\r\n\r\n      //Set seconds & rest to a multiple of 100 to offset the 10ms interval\r\n      seconds = seconds * fps;\r\n      seconds = seconds - i;\r\n      rest = rest * fps;\r\n      let fraction = (1.0 - seconds / rest).toPrecision(6);\r\n\r\n      //Rest them to original-ish state\r\n      seconds = Math.ceil(seconds / fps);\r\n      rest = rest / fps;\r\n\r\n      //if seconds get below 1, terminate; else keep counting down\r\n      if (this.state.seconds <= 0) {\r\n        this.timerStop();\r\n        this.setState({ seconds: this.state.rest, fraction: 0 });\r\n      } else {\r\n        //Once i gets to 99, decrement seconds and reset i to zero\r\n        if (i === fps - 1) {\r\n          this.setState({\r\n            seconds: seconds--\r\n          });\r\n          i = 0;\r\n        }\r\n\r\n        //Update fraction on every interval\r\n        this.setState({\r\n          fraction: fraction\r\n        });\r\n      }\r\n      i++;\r\n    }, interval);\r\n  };\r\n\r\n  // Start Timer, run countdown sequence if not already running\r\n  countDown = () => {\r\n    this.setState({ active: !this.state.active });\r\n    if (!this.state.active) {\r\n      this.runClock();\r\n    } else {\r\n      this.timerStop();\r\n    }\r\n  };\r\n\r\n  setDone = () => {\r\n    if (this.state.seconds === this.state.rest) {\r\n      this.setState({\r\n        sets: this.state.sets + 1\r\n      });\r\n    }\r\n    this.countDown();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      sets: 0,\r\n      seconds: this.state.rest,\r\n      fraction: 0\r\n    });\r\n    clearInterval(this.timer);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"header\">\r\n          <h1 className=\"title\">Set Counter/Rest Timer</h1>\r\n        </div>\r\n        <div id=\"viz\">\r\n          <h2 className=\"data\">{`Sets: ${this.state.sets}`}</h2>\r\n          <span id=\"timer_span\" onClick={this.setDone}>\r\n            <Timer\r\n              fraction={this.state.fraction}\r\n              seconds={this.state.seconds}\r\n            />\r\n          </span>\r\n          <div className=\"rest\">\r\n            {this.state.editing ? (\r\n              <React.Fragment>\r\n                <h2 className=\"data\">Rest: </h2>\r\n                <input\r\n                  type=\"number\"\r\n                  value={this.state.rest}\r\n                  onChange={this.updateRest}\r\n                  min={1}\r\n                  step={1}\r\n                />\r\n                <span className=\"button start\" onClick={this.toggleRest}>\r\n                  CLOSE\r\n                </span>\r\n              </React.Fragment>\r\n            ) : (\r\n              <h2 className=\"data\" onClick={this.toggleRest}>{`Rest: ${\r\n                this.state.rest\r\n              }`}</h2>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <span className=\"button reset\" onClick={this.reset}>\r\n          RESET\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./Components/Main\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles.css\";\n\nfunction App() {\n  return <Main />;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nserviceWorker.register();\n"],"sourceRoot":""}