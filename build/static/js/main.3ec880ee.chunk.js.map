{"version":3,"sources":["Components/Timer.js","Components/Main.js","index.js"],"names":["Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","draw","bind","assertThisInitialized","canvas","refs","ctx","getContext","clearRect","font","radius","getBoundingClientRect","width","fillStyle","shadowBlur","shadowColor","beginPath","ellipse","Math","PI","fill","lineWidth","strokeStyle","arc","stroke","borderWidth","fraction","textAlign","textBaseline","fillText","seconds","react_default","a","createElement","ref","height","React","Component","Main","state","name","sets","rest","editing","active","timerStop","console","log","clearInterval","timer","setState","toggleRest","updateRest","e","value","parseInt","target","runClock","i","setInterval","toPrecision","ceil","window","navigator","vibrate","countDown","setDone","reset","className","concat","id","onClick","Timer_Timer","Fragment","type","onChange","min","step","rootElement","document","getElementById","ReactDOM","render","Main_Main"],"mappings":"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","file":"static/js/main.3ec880ee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.draw = this.draw.bind(this);\r\n  }\r\n\r\n  draw() {\r\n    const canvas = this.refs.canvas;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, 300, 300);\r\n    ctx.font = '9em Archivo Black';\r\n    const lineWidth = 25;\r\n    const borderWidth = 5;\r\n    const margin = 5;\r\n    let width = canvas.getBoundingClientRect().width - margin;\r\n    let radius = width / 2;\r\n\r\n    //Shadow\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.25)';\r\n    ctx.shadowBlur = 15;\r\n    ctx.shadowColor = 'rgba(0 0, 0, 0.25)';\r\n    ctx.beginPath();\r\n    ctx.ellipse(\r\n      radius,\r\n      radius + 7,\r\n      radius - borderWidth,\r\n      radius - borderWidth,\r\n      1.5 * Math.PI,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.fill();\r\n\r\n    //Bottom dial\r\n    ctx.fillStyle = 'black';\r\n    ctx.beginPath();\r\n    ctx.ellipse(\r\n      radius,\r\n      radius,\r\n      radius - borderWidth,\r\n      radius - borderWidth,\r\n      1.5 * Math.PI,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.fill();\r\n\r\n    //Base RIng\r\n    ctx.lineWidth = borderWidth;\r\n    ctx.strokeStyle = 'white';\r\n    ctx.beginPath();\r\n    ctx.arc(radius, radius, radius - borderWidth, 0, 2 * Math.PI);\r\n    ctx.stroke();\r\n\r\n    //Progess Ring\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = 'cornflowerblue';\r\n    ctx.ellipse(\r\n      radius,\r\n      radius,\r\n      radius - borderWidth * 4,\r\n      radius - borderWidth * 4,\r\n      1.5 * Math.PI,\r\n      0,\r\n      2 * this.props.fraction * Math.PI\r\n    );\r\n\r\n    //Timer Display\r\n    ctx.fillStyle = '#fff';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.stroke();\r\n    ctx.fillText(this.props.seconds, radius, radius);\r\n\r\n    //Instructions\r\n    ctx.font = '1em Archivo Black';\r\n    ctx.fillText('TOUCH TO START', radius, radius + 60);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.draw();\r\n  }\r\n\r\n  render() {\r\n    return <canvas ref=\"canvas\" width=\"300\" height=\"300\" />;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Timer from './Timer';\r\n\r\nexport default class Main extends React.Component {\r\n  state = {\r\n    name: 'APP',\r\n    sets: 0,\r\n    seconds: 60,\r\n    rest: 60,\r\n    fraction: 0,\r\n    editing: false,\r\n    active: false\r\n  };\r\n\r\n  timerStop = () => {\r\n    console.log('Timer stopped');\r\n    clearInterval(this.timer);\r\n    this.setState({ active: !this.state.active });\r\n  };\r\n\r\n  // Open/Close Rest Period input box\r\n  toggleRest = () => {\r\n    this.setState({ editing: !this.state.editing });\r\n  };\r\n\r\n  // Set Rest Period Update\r\n  updateRest = e => {\r\n    let value = parseInt(e.target.value);\r\n    value = value > 300 ? 300 : value < 0 ? 0 : value;\r\n    this.setState({ rest: value, seconds: value });\r\n  };\r\n\r\n  runClock = () => {\r\n    let rest = this.state.rest; //Rest period\r\n    let seconds = this.state.seconds; //Countdown seconds for the display\r\n    let i = 0; //counter to decrement seconds on every 100th interval\r\n    this.timer = setInterval(() => {\r\n      //If starting, immediately set to next second to avoid extra second in countdown\r\n      seconds = seconds === rest ? seconds - 1 : seconds;\r\n      this.setState({ seconds });\r\n\r\n      //Set seconds & rest to a multiple of 100 to offset the 10ms interval\r\n      seconds = seconds * 100;\r\n      seconds = seconds - i;\r\n      rest = rest * 100;\r\n      let fraction = (1.0 - seconds / rest).toPrecision(6);\r\n\r\n      //Rest them to original-ish state\r\n      seconds = Math.ceil(seconds / 100);\r\n      rest = rest / 100;\r\n\r\n      //if seconds get below 1, terminate; else keep counting down\r\n      if (this.state.seconds <= 0) {\r\n        this.timerStop();\r\n        this.setState({ seconds: this.state.rest, fraction: 0 });\r\n        window.navigator.vibrate([200, 200, 200]);\r\n      } else {\r\n        //Once i gets to 99, decrement seconds and reset i to zero\r\n        if (i == 99) {\r\n          this.setState({\r\n            seconds: seconds--\r\n          });\r\n          i = 0;\r\n        }\r\n\r\n        //Update fraction on every interval\r\n        this.setState({\r\n          fraction: fraction\r\n        });\r\n      }\r\n      i++;\r\n    }, 10);\r\n  };\r\n\r\n  // Start Timer, run countdown sequence if not already running\r\n  countDown = () => {\r\n    this.setState({ active: !this.state.active });\r\n    if (!this.state.active) {\r\n      this.runClock();\r\n    } else {\r\n      this.timerStop();\r\n    }\r\n  };\r\n\r\n  setDone = () => {\r\n    if (this.state.seconds === this.state.rest) {\r\n      this.setState({\r\n        sets: this.state.sets + 1\r\n      });\r\n    }\r\n    this.countDown();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      sets: 0,\r\n      seconds: this.state.rest\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"header\">\r\n          <h1 className=\"title\">Set Counter/Rest Timer</h1>\r\n        </div>\r\n        <h2 className=\"data\">{`Sets: ${this.state.sets}`}</h2>\r\n        <div id=\"viz\">\r\n          <span onClick={this.setDone}>\r\n            <Timer\r\n              fraction={this.state.fraction}\r\n              seconds={this.state.seconds}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div className=\"footer\">\r\n          {this.state.editing ? (\r\n            <React.Fragment>\r\n              <h1 className=\"title\">Rest: </h1>\r\n              <input\r\n                type=\"number\"\r\n                value={this.state.rest}\r\n                onChange={this.updateRest}\r\n                min={1}\r\n                step={1}\r\n              />\r\n              <span className=\"button start\" onClick={this.toggleRest}>\r\n                CLOSE\r\n              </span>\r\n            </React.Fragment>\r\n          ) : (\r\n            <h1 className=\"title\" onClick={this.toggleRest}>{`Rest: ${\r\n              this.state.rest\r\n            }`}</h1>\r\n          )}\r\n        </div>\r\n        <span className=\"button reset\" onClick={this.reset}>\r\n          RESET\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Components/Main';\n\nimport './styles.css';\n\nfunction App() {\n  return <Main />;\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}